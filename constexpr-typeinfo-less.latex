\documentclass[a4paper]{article}

% \usepackage{libertine}%% Only as example for the romans/sans fonts
\usepackage[T1]{fontenc}
\usepackage[colorlinks,allcolors=blue]{hyperref}
\usepackage[nottoc]{tocbibind}
\usepackage[scaled=0.85]{beramono}
\usepackage[utf8]{inputenc}
\usepackage{changepage}
\usepackage{color}
\usepackage{courier}
\usepackage{enumitem}
\usepackage{fullpage}
\usepackage{listings}
\usepackage{nameref}
\usepackage{parskip}
\usepackage{url}
\usepackage{xcolor}
\usepackage{xspace}
\usepackage[bottom,multiple]{footmisc}

\usepackage[bordercolor=white,backgroundcolor=gray!30,linecolor=black,colorinlistoftodos]{todonotes}
\newcommand{\takeaway}[1]{\todo[color=yellow,inline]{#1}}

\usepackage[style=iso]{datetime2}
\usepackage{biblatex}
\addbibresource{bibliography.bib}

% Solarized colour scheme for listings
\definecolor{solarized@base03}{HTML}{002B36}
\definecolor{solarized@base02}{HTML}{073642}
\definecolor{solarized@base01}{HTML}{586e75}
\definecolor{solarized@base00}{HTML}{657b83}
\definecolor{solarized@base0}{HTML}{839496}
\definecolor{solarized@base1}{HTML}{93a1a1}
\definecolor{solarized@base2}{HTML}{EEE8D5}
\definecolor{solarized@base3}{HTML}{FDF6E3}
\definecolor{solarized@yellow}{HTML}{B58900}
\definecolor{solarized@orange}{HTML}{CB4B16}
\definecolor{solarized@red}{HTML}{DC322F}
\definecolor{solarized@magenta}{HTML}{D33682}
\definecolor{solarized@violet}{HTML}{6C71C4}
\definecolor{solarized@blue}{HTML}{268BD2}
\definecolor{solarized@cyan}{HTML}{2AA198}
\definecolor{solarized@green}{HTML}{859900}

\lstset{
  basicstyle=\footnotesize\ttfamily,
  rangeprefix=//\ ,
  includerangemarker=false,
}

% Define C++ syntax highlighting colour scheme
\lstdefinelanguage{cpp}{
  language=C++,
  basicstyle=\footnotesize\ttfamily,
  numbers=left,
  numberstyle=\footnotesize,
  tabsize=2,
  breaklines=true,
  escapeinside={@}{@},
  numberstyle=\tiny\color{solarized@base01},
  keywordstyle=\color{solarized@green},
  stringstyle=\color{solarized@cyan}\ttfamily,
  identifierstyle=\color{solarized@blue},
  commentstyle=\color{solarized@base01},
  emphstyle=\color{solarized@red},
  frame=single,
  rulecolor=\color{solarized@base2},
  rulesepcolor=\color{solarized@base2},
  showstringspaces=false,
}

\lstdefinelanguage{diff}{
  morecomment=[f][\color{blue}]{@@},           % group identifier
  morecomment=[f][\color{red}]{-},             % deleted lines
  morecomment=[f][\color{green!50!black}]{+},  % added lines
  morecomment=[f][\color{magenta}]{---},       % diff header lines
  morecomment=[f][\color{magenta}]{+++},
}

\lstdefinelanguage{plus}{
  basicstyle=\footnotesize\ttfamily\color{green!50!black},
  emph={see,below,TypeSwitch,unspecified},
  emphstyle=\itshape
}

\lstdefinelanguage{std}{
  basicstyle=\footnotesize\ttfamily,
  emph={see,below,TypeSwitch,unspecified},
  emphstyle=\itshape,
  escapeinside={@}{@},
}

\lstdefinelanguage{signature}{
  basicstyle=\ttfamily\color{green!50!black},
  emph={see,below,TypeSwitch,unspecified},
  emphstyle=\itshape
}

\newcommand{\desc}[1]{\textit{#1}}
\newcommand{\requires}{\desc{Requires}}
\newcommand{\effects}{\desc{Effects}}
\newcommand{\precondition}{\desc{Precondition}}
\newcommand{\postcondition}{\desc{Postcondition}}
\newcommand{\throws}{\desc{Throws}}
\newcommand{\returns}{\desc{Returns}}
\newcommand{\remarks}{\desc{Remarks}}
\newcommand{\exceptionsafety}{\desc{Exception Safety}}
\newcommand{\fullref}[1]{\ref{#1} \nameref{#1}}

\def\code#1{\texttt{#1}}
\newcommand\mypound{\protect\scalebox{0.8}{\raisebox{0.4ex}{\#}}}
\newcommand{\CC}{C\nolinebreak\hspace{-.05em}\raisebox{0.4ex}{\resizebox{!}{0.6\height}{\bf++}}}
\newcommand{\cplusplus}{\protect\CC}
\newcommand{\this}{\code{this}\xspace}
\newcommand{\self}{\code{self}\xspace}
\newcommand{\cvref}{\emph{cv-ref qualifiers}\xspace}
\newcommand{\spaceship}{\code{<=>}\xspace}
\def\stableref#1{[#1]}
\def\concept#1{\emph{#1}}
\newcommand{\StrongOrder}{\code{strong\_order}\xspace}
\newcommand{\typeinfo}{\code{type\_info}\xspace}
\newcommand{\typeindex}{\code{type\_index}\xspace}
\newcommand{\constexpr}{\code{constexpr}\xspace}
\def\inserttt#1{\colorbox[rgb]{0.3,1.0,0.3}{#1}}

\date{2018-01-07}
\title{Make \typeinfo ordering methods \code{constexpr}}
\author{Gašper Ažman}

\newcommand{\emailaddressa}{gasper.azman@gmail.com}
\newcommand{\emaila}{\href{mailto:\emailaddressa}{\emailaddressa}}

\begin{document}

\maketitle

\begin{flushright}
  \begin{tabular}{ll}
  Document \mypound{}: &DxxxxR0\\
  Date:       &2018-01-07\\
  Audience:   &Library Working Group\\
  Reply-to:   &\author{Gašper Ažman}, \emailaddressa\\
  \end{tabular}
\end{flushright}

{\hypersetup{linkcolor=black}
  \tableofcontents
}

\section{Overview}

The \code{type\_info::before(const type\_info\& rhs)} method provides for a
run-time implementation-defined (but stable!) ordering of \code{type\_info}
objects, together with \code{operator==} and \code{operator!=}.\footnote{The
equality operator is stronger than more than address equality - it is required
to be consistent with \code{std::is\_same}.}

Despite the fact that this ordering information is unchangeable at run-time,
this method is not marked \constexpr.

This paper explores the issues and their resolutions one might encounter when
trying to mark this method \constexpr, and proposes the obvious extensions of
such a move.


\section{Problem description}

There is, in \cplusplus, currently no way to reliably and correctly sort types at
compile time. Various hacks have been implemented in order to get around the
issue this presents, from quadratic typesets to hardcoding sort keys in types,
to tricking the compiler to give the name of the type (which incorrectly handles
anonymous namespaces).

Sorting types at compile time is essential for well-performing typesets, such as
ones required by various policy-based template libraries\footnote{polly,
liberasure, layout-optimizing tuple implementations etc.}.

This presents unsolvable problems for libraries that provide types whose
behaviour is configured using a set (not a list) of policies.

The inability to sort these policies into a canonical order results in having
several ways of constructing an otherwise identical type.

As an example, in \code{liberasure}, these two types should be identical:

\begin{lstlisting}
  using namespace erasure; using namespace std;
  using movable_1 = any<move_constructible, move_assignable>;
  using movable_2 = any<move_assignable, move_constructible>;
  static_assert(is_same<movable_1, movable_2, "... unfortunately fails.");
\end{lstlisting}

However, due to the inability to establish a canonical order of the policies,
there is no way of making the assertion pass in general.

This creates additional template instantiations every time such two \code{any}
objects are used, prevents trivial move-assignment, and all kinds of other
interoperability problems which could have been easily avoidable were we able to
canonicalize the order at type creation.

There are similar issues with constructing \code{variant} objects from typelists
(how do I make sure my dynamic type lists are in the same order everywhere?),
and optimizing tuple layouts:
\begin{lstlisting}
template <typename... Ts>
struct optimized_tuple
  : apply<std::tuple, stable_sort<size_of, typesort<Ts...>> {};

template <typename... Ts>
struct stable_variant
  : apply<std::variant, unique<typesort<Ts...>> {};
\end{lstlisting}

While \code{apply}, \code{stable\_sort}, \code{size\_of} and
\code{unique}\footnote{The $O(n^2)$ version, not the linear one.} are
straightforward to implement (and just about every metaprogramming library has
the implementations), \code{typesort} is currently impossible.

In effect, what is needed is the ability to define (and use) the following
snippet:

\begin{lstlisting}
template <typename T, typename U>
using is_before = std::integral_constant<bool, typeid(T).before(typeid(U))>;
\end{lstlisting}

Note that \code{T} and \code{U} cannot be glvalues of a polymorphic type, since
they are not values.

\section{Proposal}

In \stableref{type.info}, add:
\begin{lstlisting}[language=std]
  bool operator==(const type_info& rhs) const noexcept @\inserttt{\constexpr}@;
  bool operator!=(const type_info& rhs) const noexcept @\inserttt{\constexpr}@;
  bool type_info::before(const type_info& rhs) const noexcept @\inserttt{\constexpr}@;
\end{lstlisting}

The \typeindex methods are implemented directly with \code{before}, so these
should be constexpr as well. The constructor is obviously just a missing
constexpr annotation:

In \stableref{type.index.overview}, add:
\begin{lstlisting}[language=std]
      type_index(const type_info& rhs) noexcept @\inserttt{\constexpr}@;
      bool operator==(const type_index& rhs) const noexcept @\inserttt{\constexpr}@;
      bool operator!=(const type_index& rhs) const noexcept @\inserttt{\constexpr}@;
      bool operator< (const type_index& rhs) const noexcept @\inserttt{\constexpr}@;
      bool operator<= (const type_index& rhs) const noexcept @\inserttt{\constexpr}@;
      bool operator> (const type_index& rhs) const noexcept @\inserttt{\constexpr}@;
      bool operator>= (const type_index& rhs) const noexcept @\inserttt{\constexpr}@;
\end{lstlisting}

\section{Acknowledgments} 

\printbibliography


\end{document}

